[{"categories":["Linux"],"content":"通常在 AwesomeWM 拥有 top 栏的情况下，如果使用 Virtualbox 的虚拟机的时候，没有办法获得沉浸式的体验。 正常情况下我们会利用 Virtualbox -\u003e View -\u003e Full-Screen Mode 进行全屏，但是 top 栏仍然会存在于界面上。 Right Ctrl + f 可以进行快速的 Full-Screen Mode 的切换，这是由 Virtualbox 提供的快捷键 ","date":"2023-08-15","objectID":"/posts/awesome-wm-virtualbox-full-screen/:0:0","tags":["AwesomeWM","Virtualbox","full-screen"],"title":"Awesome Wm Virtualbox Full Screen","uri":"/posts/awesome-wm-virtualbox-full-screen/"},{"categories":["Linux"],"content":"解决方法 首先利用 Right Ctrl + f 进入 Virtualbox 的全屏模式，然后使用 Right Ctrl + Home 呼出控制菜单 当当前窗口聚焦于该控制菜单的时候，快速按 Mod4 + f 进入 AwesomeWM 提供的全屏模式 此时即可大功告成。 如果是希望退出全屏的状态，则仍然使用 Right Ctrl + Home 并且利用 Mod4 + f 或者 Right Ctrl + f 的方式即可退出全屏。 ","date":"2023-08-15","objectID":"/posts/awesome-wm-virtualbox-full-screen/:1:0","tags":["AwesomeWM","Virtualbox","full-screen"],"title":"Awesome Wm Virtualbox Full Screen","uri":"/posts/awesome-wm-virtualbox-full-screen/"},{"categories":["Linux"],"content":"个人理解的好处 最终可以获得一个 tag 利用虚拟机进行独占显示，可以把该 tag 看作为单独的系统进行使用。 更加沉浸的体验，当完全希望是在弄外的系统内进行学习的时候 除非是触发 Right Ctrl + Home 或者其他基于 Right Ctrl 的快捷键的情况下，在全屏模式下可以更好的进行虚拟机内部的快捷键的使用 由于我的 HHKB 键盘没有 Right Ctrl 按键， 所以只能在 Perferences 中将 Input 的 Virtual Machine 里的 Host Key 改为 Right Shift 即可 ","date":"2023-08-15","objectID":"/posts/awesome-wm-virtualbox-full-screen/:2:0","tags":["AwesomeWM","Virtualbox","full-screen"],"title":"Awesome Wm Virtualbox Full Screen","uri":"/posts/awesome-wm-virtualbox-full-screen/"},{"categories":["网络"],"content":"准备 抓包工具 - whistle 小翼管家手机 app ","date":"2023-08-11","objectID":"/posts/get-zxhn-f4600t-telcomadmin-password/:1:0","tags":["电信","光猫","路由器","超级管理密码"],"title":"获取 ZXHN F4600T 光猫超级管理密码(抓包)","uri":"/posts/get-zxhn-f4600t-telcomadmin-password/"},{"categories":["网络"],"content":"原理 利用小翼管家的远程控制路由器的功能，通过开关网关上设置进行触发网络请求，该请求会发送到小翼管家的内部的服务器，然后服务器进行对应的设备的指令的下发。 主要是获取该接口相关的请求中的认证信息，具体是什么认证信息我们不用追究。只需要篡改其请求的请求参数，将参数改为获取光猫的超级密码即可。 请求参数: { \"Params\": [], \"MethodName\": \"GetTAPasswd\", \"RPCMethod\": \"CallMethod\", \"ObjectPath\": \"/com/ctc/igd1/Telecom/System\", \"InterfaceName\": \"com.ctc.igd1.SysCmd\", \"ServiceName\": \"com.ctc.igd1\" } ","date":"2023-08-11","objectID":"/posts/get-zxhn-f4600t-telcomadmin-password/:2:0","tags":["电信","光猫","路由器","超级管理密码"],"title":"获取 ZXHN F4600T 光猫超级管理密码(抓包)","uri":"/posts/get-zxhn-f4600t-telcomadmin-password/"},{"categories":["网络"],"content":"过程 由于 whistle 是一个 npm 的包， 所以请提前准备 npm 环境。 通过 npm install -g whistle 进行安装，安装完毕后使用 w2 start 进行启动。 whistle启动 接下来我们可以通过其中返回的地址在浏览器进行访问，可见如下界面: whistle网络 首先配置 https 的启用，否则到时候抓到的连接的数据里面没有办法查看请求参数，也就没有办法进行篡改。 whistel https 入口 whistel https 配置项 ","date":"2023-08-11","objectID":"/posts/get-zxhn-f4600t-telcomadmin-password/:3:0","tags":["电信","光猫","路由器","超级管理密码"],"title":"获取 ZXHN F4600T 光猫超级管理密码(抓包)","uri":"/posts/get-zxhn-f4600t-telcomadmin-password/"},{"categories":["网络"],"content":"手机网络设置 将手机连入与电脑同一网络的局域网中，然后打开网络设置，找到代理设置。这里以 iPhone 进行举例： 默认情况下 whistle 是已经在进行数据的监听，如果未进行监听数据则可以打开 Network 下的 Record 开关，使其打开监听，如果太多杂乱的数据可以先进行点击 Clear 进行清除。 设置完成过后就可以打开手机上的小翼管家, 进行触发接口调用的操作 确保能够正确进入到网关的设置界面，先断开 WiFi 使用移动流量进行访问， 然后找到自己的网关详情，点击网关设置按钮进入设置页面。 这时候我们连接我们的 WiFi ，等待 WiFi 成功连接后，点击指示灯的切换。 就可以在 whistle 中查看到捕获到的接口请求数据: 获取到的数据 其中 Host 为 nos9.189.cube.com 则是我们想要的接口请求。 ","date":"2023-08-11","objectID":"/posts/get-zxhn-f4600t-telcomadmin-password/:3:1","tags":["电信","光猫","路由器","超级管理密码"],"title":"获取 ZXHN F4600T 光猫超级管理密码(抓包)","uri":"/posts/get-zxhn-f4600t-telcomadmin-password/"},{"categories":["网络"],"content":"重发请求 首先我们进行编辑该请求，将其中的 body 参数改为本文提供的参数 编辑请求 将 body 参数进行如下替换后，点击右上角的蓝色纸飞机按钮进行发送请求。 编辑body参数并且发送 其中在 Response 中的 Body 中的内容则包含你的网关的超级密码，不同地区可能有些许不同。 成都地区的密码在 Params 字段的 数组的第一个字符串。 接口请求结果 ","date":"2023-08-11","objectID":"/posts/get-zxhn-f4600t-telcomadmin-password/:3:2","tags":["电信","光猫","路由器","超级管理密码"],"title":"获取 ZXHN F4600T 光猫超级管理密码(抓包)","uri":"/posts/get-zxhn-f4600t-telcomadmin-password/"},{"categories":["网络"],"content":"总结 成功获取密码后则可以通过 网关地址:8080进行访问管理页面，输入帐号telecomadmin，使用上面获取到的密码即可登录。 whistle 是一个非常棒的库，对于IOS端的抓包非常方便，并且该软件是免费且跨平台的，只要有node环境的都可以使用。 参考 电信光猫抓包获取超级密码 ","date":"2023-08-11","objectID":"/posts/get-zxhn-f4600t-telcomadmin-password/:4:0","tags":["电信","光猫","路由器","超级管理密码"],"title":"获取 ZXHN F4600T 光猫超级管理密码(抓包)","uri":"/posts/get-zxhn-f4600t-telcomadmin-password/"},{"categories":["日常"],"content":"开始 明确目标 需要明确该文章的受众群体，也就是目标人群。博文是用于记录或者传播信息的，那么信息的价值和被需求性则可以作为编写文章的目的。或者也可以作为单纯的笔记，能够梳理自身所了解的知识点，对于自身的知识作为一个巩固。 尽量编写分享相关的内容，对于博文的阅读量来说更佳有价值。如果只是作为笔记，那么其中的一些内容可能会只有作者自己能够理解。 明确类型 技术博文的常用题材如下： 技术介绍 主要是针对新出的一些技术，例如react 18和vue3的一些新特性，博文类似于技术文档。在我们学习了该项技术后，并且有一定的运用经验的情况下，就可以准备编写工作。它面向的则是此类技术的入门者。 技术深入 从原理角度深入剖析某项技术，它面向的是进阶者 解决问题 通常一些异常或者错误的解决方法方案，或者是某技术领域的需求的解决方案。它面向的是遇到同样情况的开发者。 翻译转载 该类型则如标题一样，遇见一些好的博文可以将其翻译成其他语言，用以帮助外语能力不佳的同学。或是将外网一些优秀的博文存档在自己的博客中，便于以后自己再次查看。 😂 ","date":"2023-01-10","objectID":"/posts/how-to-write-a-good-blog/:1:0","tags":["写作","学习"],"title":"如何写好一篇技术博文","uri":"/posts/how-to-write-a-good-blog/"},{"categories":["日常"],"content":"过程 拟定标题 标题不要太宽泛 比如你想写一个Rxjs系列的文章，于是你是定了一个『一文搞懂 Rxjs』，结果你就只写了一个Rxjs中的方法如何使用 如果实在想把标题定的宽泛些，那么我们应该将其写成一个系列，在保证篇幅的情况下，拆分内容，让读者的阅读感更佳。 不要标题党 从短期来看，好的标题确实可以吸引到更多的阅读量。但是从长远的角度考虑，如果你的博文质量不足，那么以后将会流失很多回头客。 毕竟一个技术博客，需要更多同技术者的关注，才可以让自己的博客变得更有价值。 结构 良好的文章结构有益于读者能够快速的判断文章是否适合自己，能否告知读者本文的大致方向。能够提供什么，能够解决什么，能够帮助什么。 可以充分利用前言进行大致描述本文的主题。 可以利用目录来帮助读者快速浏览文章的纲要。 提纲 举个栗子： fabricjs 是什么? 为什么使用 fabricjs ? 有了提纲能否帮助写作的是否不偏题，能否围绕主题进行展开。 写作手法 常用的写作手法有两种： 总分总 开头，介绍，结尾 提出问题 以抛出问题的方式，然后进行回答问题，如何解决问题。 排版 良好的排版有助于增加读者的阅读体验。 参考 阮一峰 的 『中文技术文档的写作规范』 即可，根据实际情况提进行调整。 ","date":"2023-01-10","objectID":"/posts/how-to-write-a-good-blog/:2:0","tags":["写作","学习"],"title":"如何写好一篇技术博文","uri":"/posts/how-to-write-a-good-blog/"},{"categories":["日常"],"content":"后续 阅读文章 从读者的角度去阅读写好的文章，看自己能否从这些图文中了解或者掌握文章的所提供的技术。如果自己看了都觉得困惑，那么需要考虑去完善这篇文章了 检查文章 检查文章是否出现错字，病句，错误的英文单词。 美化文章 根据预览效果去优化排版，甚至可以通过一些css样式进行美化。 参考 怎么写好一篇博客（分享 3 个写博客的步骤） 谈一谈|如何写好一篇博客 ","date":"2023-01-10","objectID":"/posts/how-to-write-a-good-blog/:3:0","tags":["写作","学习"],"title":"如何写好一篇技术博文","uri":"/posts/how-to-write-a-good-blog/"},{"categories":null,"content":"I’m Boiao Ch 混子一枚 算不上程序员，互联网搬砖农民工是也。 ","date":"2022-12-13","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"Contact E-mail: doubiliao@gmail.com ","date":"2022-12-13","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"Skills 以下所列技能不代表全部技能如果是没列出来的，那就是没找到合适的图标，列出来的也不保证一定会:p 前端 后端 其他 ","date":"2022-12-13","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"},{"categories":["前端"],"content":"注意 Note: 无法使用 vite.config.* 无法在vite.config.*中构建多个打包的入口，这时候需要自己编写一个打包的脚本，我将其放置在scripts/build.js中。 将 vite 中的 build 方法 import 进来。 手动执行打包; ","date":"2022-08-08","objectID":"/posts/vite-multiple-lib-entry-config/:1:0","tags":["vite","build"],"title":"Vite 多入口lib模式打包配置","uri":"/posts/vite-multiple-lib-entry-config/"},{"categories":["前端"],"content":"代码演示 import { build } from \"vite\"; // make library list, the name for folder const components = [\"text\", \"input\"]; const librarys = components.map((name) =\u003e { return { entry: `src/components/${name}/index.ts`, name, // output filename; filename: `xxx-${name}.js`, }; }); librarys.forEach(async (lib) =\u003e { await build({ configFile: false, sourcemap: true, build: { lib, assetsDir: \"\", emptyOutDir: false, rollupOptions: {}, }, }); }); ","date":"2022-08-08","objectID":"/posts/vite-multiple-lib-entry-config/:2:0","tags":["vite","build"],"title":"Vite 多入口lib模式打包配置","uri":"/posts/vite-multiple-lib-entry-config/"},{"categories":["前端"],"content":" 在编写 e2e 测试的时候，有的业务会有浏览器自带的 alert 弹出，利用 puppeteer 的按键点击事件无效。 ","date":"2022-07-18","objectID":"/posts/jest-e2e-puppeteer-comfirm-alert/:0:0","tags":["unit-test","puppeteer"],"title":"Jest e2e测试 Puppeteer 自动点击 Alert 确定","uri":"/posts/jest-e2e-puppeteer-comfirm-alert/"},{"categories":["前端"],"content":"思路一 给page添加事件监听，当有对话框弹出的时候，自动进行对话框的确认。 代码如下 page.on(\"dialog\", async (dialog) =\u003e { await dialog.accept(); }); ","date":"2022-07-18","objectID":"/posts/jest-e2e-puppeteer-comfirm-alert/:1:0","tags":["unit-test","puppeteer"],"title":"Jest e2e测试 Puppeteer 自动点击 Alert 确定","uri":"/posts/jest-e2e-puppeteer-comfirm-alert/"},{"categories":["前端"],"content":"思路二 将自带的alert方法进行重写，在启动puppeteer的 page 后，将该 api 进行重写，让其不会调用原始的alert,也就可以保证不会弹出对话框来进行阻塞进程。 同时还可以利用console.log来进行替换该方法，在控制台中打印警告信息。 ","date":"2022-07-18","objectID":"/posts/jest-e2e-puppeteer-comfirm-alert/:2:0","tags":["unit-test","puppeteer"],"title":"Jest e2e测试 Puppeteer 自动点击 Alert 确定","uri":"/posts/jest-e2e-puppeteer-comfirm-alert/"},{"categories":["工具"],"content":"因为我使用的是 1080p 的屏幕，所以这里我设置的是中文字体是 WenQuanYi Zen Hei Sharp; 使用点阵字体可以获得更佳的体验效果，英文字体我使用的是Terminus ;; Set font for chinese characters ;; Font should be twice the width of asci chars so that org tables align ;; This will break if run in terminal mode, so use conditional to only run for GUI. (if (display-graphic-p) (dolist (charset '(kana han cjk-misc bopomofo)) (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family \"Hiragino Sans GB\" :size 18)))) ","date":"2022-07-13","objectID":"/posts/doom-emacs-set-chinese-font/:0:0","tags":["emacs","lisp","font","chinese"],"title":"Doom Emacs 给中文指定字体","uri":"/posts/doom-emacs-set-chinese-font/"},{"categories":["工具"],"content":"预览 预览图 ","date":"2022-07-13","objectID":"/posts/doom-emacs-set-chinese-font/:1:0","tags":["emacs","lisp","font","chinese"],"title":"Doom Emacs 给中文指定字体","uri":"/posts/doom-emacs-set-chinese-font/"},{"categories":["工具"],"content":"设备 hackintosh (BCM943602CDP) 2015 Macbook Pro 15 YDKB for HHKB PRO 2 ","date":"2021-02-14","objectID":"/posts/switch-bluetooth-keyboard-on-two-macos-device/:1:0","tags":["mac","bluetooch","keyboard"],"title":"在两台macOS设备上切换同一个蓝牙键盘","uri":"/posts/switch-bluetooth-keyboard-on-two-macos-device/"},{"categories":["工具"],"content":"问题 没有办法进行两台设备的自由切换，由于 iCloud 同步的问题，最开始键盘中只有一台设备的配对信息，导致另外可以自动连接上但是没有办法进行输入。 ","date":"2021-02-14","objectID":"/posts/switch-bluetooth-keyboard-on-two-macos-device/:2:0","tags":["mac","bluetooch","keyboard"],"title":"在两台macOS设备上切换同一个蓝牙键盘","uri":"/posts/switch-bluetooth-keyboard-on-two-macos-device/"},{"categories":["工具"],"content":"处理 首先解决键盘中存储的设备信息 从零开始使用R Shift + L Shift + r 进行重置键盘上的蓝牙配对信息 ","date":"2021-02-14","objectID":"/posts/switch-bluetooth-keyboard-on-two-macos-device/:3:0","tags":["mac","bluetooch","keyboard"],"title":"在两台macOS设备上切换同一个蓝牙键盘","uri":"/posts/switch-bluetooth-keyboard-on-two-macos-device/"},{"categories":["工具"],"content":"配对 首先使用键盘和我的 MacBook 进行配对，此时笔记本上的蓝牙键盘可以正常使用。 然后关闭 MacBook 上的蓝牙开关 使用Fn + z 进行锁定键盘，再使用长按f+j进行唤醒键盘。 在 Hackintosh 上删除蓝牙设备上显示的 HHKB BLE(该数据是通过 iCloud 同步过来，连接上键盘后会无法使用)，将其删除。 重新在 Hackintosh 上进行连接蓝牙键盘。 大功告成，这样就可以让键盘存储两台设备的蓝牙信息。两台设备都是可以连接并使用的。 ","date":"2021-02-14","objectID":"/posts/switch-bluetooth-keyboard-on-two-macos-device/:3:1","tags":["mac","bluetooch","keyboard"],"title":"在两台macOS设备上切换同一个蓝牙键盘","uri":"/posts/switch-bluetooth-keyboard-on-two-macos-device/"},{"categories":["工具"],"content":"注意 设备切换依赖其中一个设备关闭蓝牙断开，并且重启键盘蓝牙，键盘才会自动连接上当前蓝牙打开的这台设备，相对来说还是比较麻烦。期待后续 YDKB 固件可以更新，使用快捷键进行设备切换。 ","date":"2021-02-14","objectID":"/posts/switch-bluetooth-keyboard-on-two-macos-device/:4:0","tags":["mac","bluetooch","keyboard"],"title":"在两台macOS设备上切换同一个蓝牙键盘","uri":"/posts/switch-bluetooth-keyboard-on-two-macos-device/"},{"categories":["系统"],"content":"如果你的黑苹果，在进入系统的时候，出现该错误，而且该错误并不是每次都会发生，当你继续回到主菜单，多次重新尝试的时候，你可能可以成功进入系统。 ","date":"2021-01-24","objectID":"/posts/hackintosh-startimage-failed-solution/:0:0","tags":["hackintosh","boot"],"title":"Hackintosh OCB：Startimage Failed 的解决方法","uri":"/posts/hackintosh-startimage-failed-solution/"},{"categories":["系统"],"content":"多次尝试一次都未能进入系统 Booter-\u003eQuirks-\u003eDevirtualiseMmio 设为 true ","date":"2021-01-24","objectID":"/posts/hackintosh-startimage-failed-solution/:1:0","tags":["hackintosh","boot"],"title":"Hackintosh OCB：Startimage Failed 的解决方法","uri":"/posts/hackintosh-startimage-failed-solution/"},{"categories":["系统"],"content":"多次尝试有几率进入系统 Booter-\u003eQuirks-\u003eProvideCustomSlide 设为 true ","date":"2021-01-24","objectID":"/posts/hackintosh-startimage-failed-solution/:2:0","tags":["hackintosh","boot"],"title":"Hackintosh OCB：Startimage Failed 的解决方法","uri":"/posts/hackintosh-startimage-failed-solution/"},{"categories":["系统"],"content":"z390 主板特殊处理 Booter-\u003eQuirks-\u003eProtectUefiServices 可能会需要设为 true，具体自己测试 ","date":"2021-01-24","objectID":"/posts/hackintosh-startimage-failed-solution/:2:1","tags":["hackintosh","boot"],"title":"Hackintosh OCB：Startimage Failed 的解决方法","uri":"/posts/hackintosh-startimage-failed-solution/"},{"categories":["工具"],"content":"Git 安装 ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:0:0","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["工具"],"content":"MacOS MacOS自带 git 命令，前提是需要安装Xcode Command Line Tools git --version ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:1:0","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["工具"],"content":"Linux 根据发行版的不同安装方式有差异，这里给出debian系的安装方式： sudo apt install git-all 更多的安装方式请参考这里!! ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:2:0","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["工具"],"content":"Windows 打开Git - Downloading Package 该网址，下载适合自己系统位数的版本进行安装。 HTTP 和 SSH 方式连接远程 GIT ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:3:0","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["工具"],"content":"HTTP 该方式相交于 SSH 连接，安全性有所降低，但使用起来都是没有什么差距的 不方便的点是在于每次本地 git 和远端 git 进行数据来往时，都会询问要账号密码，相对于 SSH 验证的话会比较麻烦，但是有些第三方的 git 工具会帮你进行该操作，可以帮你保存账号和密码。 ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:4:0","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["工具"],"content":"SSH 初次使用会比较麻烦，需要配置 openssh 密钥对 ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:5:0","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["工具"],"content":"首先创建一个自己密钥 ssh-keygen -t rsa -C \"你的email地址\" #高级用法自己看帮助 ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:5:1","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["工具"],"content":"添加 SSH KEY 到服务器 以 gitlab 为例，User Settings –\u003e SSH Keys –\u003e 将id_rsa.pub里面的内容拷贝到 key 的输入框里面，title 自己随便写一个(建议写自己的电脑名称，方便多台电脑记录 key 的使用),点击Add key进行添加。 然后就可以愉快的进行 Git 操作了。 至于 ssh config 的高级用法，请自行查找资料(便于多远端 git 地址验证和使用) Clone 克隆 第一件要做的事情就是克隆代码仓库到本地，使用的命令是 git clone http地址或者ssh地址 Push 推送 如果是远端仓库为空的仓库，本地有了 git 仓库，要本地推送到远端，使用 push 指令 git push push 之前需要绑定一次远端和本地的关联 使用git remote add进行添加 例如： git remote add origin xxx.git 其中 origin 可以任意取名称作为识别区分，作为一个本地仓库多个远端仓库的情况使用，默认情况夏还是建议使用origin Fetch 获取 用于获取远端分支的更新 git fetch 可以得到远端的分支的一些变化，以便确保知道哪些分支有改动 Pull 拉取 该指令主要是针对当前分支 进行拉取远端最新的数据，如果远端没有更新，那么会提示Already up to date. git pull Add 暂存文件 该指令是将指定文件添加到暂存区 git add 文件名 git add . #增加新增文件和更新的文件，不包括删除的文件 git add -u #只增加本身已经被add的文件(tracked),也就是被更新的文件 git add -A #增加所有变更 Commit 提交 将暂存区的内容进行保存为一次提交，有点类似于保存文件并打上记号 git commit -m '提交信息' # git commit —amend # 会把当前暂存的文件直接添加到上一次的commit中，不会增加多的commit，用于补充修改上次commit的少量内容使用，可以让commit保持干净 题外话:Commit 规范 npm install commitizen -g git cz Merge 合并 合并分支的目的是为了团队协作之间，将不同的代码分支进行合并 git merge 目标分支名 #可以是远端分支 例如 origin/dev 首先在当前分支下，使用该命令，会将目标分支合并到当前分支，如果有冲突的情况下，会有冲突文件的特殊标识。 git 并会说明冲突部分的代码块是当前分支(current)还是输入(incomming)的内容，需要解决冲突，也就是在冲突的部分，二者选其中一个。对文件进行修改后保存，进行 commit 提交,并推送远端分支，完成合并 注：如果没有冲突的情况下，直接合并会将当前的 head 指到两个分支里面最新的 commit,并且所有的 commit 将会合并到一个分支，可以通过git log进行查看 Status 状态 用于查看当前工作区的状体，查看文件新增 更新 删除，该指令会将文件的变化列在命令输出的结果里面 git status Branch 分支 git branch 分支名 #会基于当前分支创建一个指定名字的分支 git branch #列出所有分支 git branch -d 分支名 #删除分支 git branch -D 分支名 #强制删除分支 Checkout 签出 用于切换当前分支，以及创建分支 还有恢复文件的功能 如果是删除文件已经 commit 了，需要通过git checkout #commitID 文件名,这时候git status可以看到会将该文件列为新增文件，你需要重新创建一个 commit 来将他保存到 git 中 如果是还没有进行提交的文件git checkout HEAD -- 文件名 即可。 git checkout 分支名 git checkout -b dev origin/dev # 直接基于远程dev分支 创建一个本地dev分支，并且切换到dev分支 新版本 git 已经将 checkout 拆分为switch和restore,具体用法可以自行了解 git switch 分支名 #切换分支 git switch -c 分支名 #创建一个分支并切换过去 Stash 草稿 用于在进行修改后，但是却不需要进行 commit，这个时候需要一个干净的工作区的情况下，例如在不提交的的时候进行合并代码等操作 注意 stash 的文件必须是被 add 到 git 工作区了的文件才可以(该文件要被 git 所控制) git stash [save message] #message代表的是自己写的注释，以便还原该stash 建议使用工具 git stash list #查看草稿列表 git stash clear #删除所有草稿 Tag 标签 版本号控制 git tag v1.0.0 git tag list #列出所有tag git tag -d v1.0.0 #删除指定tag git push origin --tags #推送所有tag git push origin v1.0.0 #推送指定tag Rm 删除 git rm 文件名 #同时从工作区和索引中删除文件。即本地的文件也被删除了 git rm --cached 文件名 #从索引中删除文件。但是本地文件还存在， 只是不希望这个文件被版本控制。 git rm -r 文件夹名 # 删除文件夹 Log 日志 用于查看 commit 提交的记录 git log Init 初始化 git init 该指令可以在一个空文件夹下创建一个 git 环境，会再当前目录下创建一个.git文件夹作为 git 的工作目录 ","date":"2020-07-20","objectID":"/posts/git-simple-guidelines/:5:2","tags":["git","教程"],"title":"Git简易指南","uri":"/posts/git-simple-guidelines/"},{"categories":["前端"],"content":"微信小程序 富文本渲染 微信小程序本身提供rich-text的组件，直接富文本字符串丢进nodes属性即可。 你以为就这么就结束了？不，你错了。因为后台为了兼容IE9，我选用wangEditor2所 编辑的富文本你会发现好多标签都没有识别出来，特别是 HTML4 标准的。 好坑。 wangEditor2所产生的生成的富文本标签，没有style属性。例如对齐居中是align属性 字体大小没有单位，只有1 ~ 7的数字来标识。还有一些具体的没有查明。 rich-text与wangEditor2的配合不怎么好，容易出现文字消失，文字布局消失，文字没有颜色之类的、图片不能放大预览等等奇奇怪怪的问题。 总之微信小程序还是推荐wxParse这个库。用起来比较简单。 ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:0:0","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"克隆最新仓库 git clone git@github.com:icindy/wxParse.git ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:1:0","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"拷贝关键文件到你的项目内 我放在libs目录下 ├── xxxxxxxx.js #其他的库 └── wxParse ├── html2json.js ├── htmlparser.js ├── showdown.js ├── wxDiscode.js ├── wxParse.js ├── wxParse.wxml └── wxParse.wxss 本来还有个emoji文件夹的。里面全是图片，洁癖患者直接删掉即可。 ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:2:0","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"如何使用 ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:3:0","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"某 Page —- xxxx xxxx.js //在使用的View中引入WxParse模块 const WxParse = require(\"../../wxParse/wxParse.js\"); const article = \"\u003cdiv\u003e我是HTML代码\u003c/div\u003e\"; /** * WxParse.wxParse(bindName , type, data, target,imagePadding) * 1.bindName绑定的数据名(必填) * 2.type可以为html或者md(必填) * 3.data为传入的具体数据(必填) * 4.target为Page对象,一般为this(必填) * 5.imagePadding为当图片自适应是左右的单一padding(默认为0,可选) */ const _this = this; WxParse.wxParse(\"article\", \"html\", article, _this, 5); xxxx.wxss /* 在使用的Wxss中引入WxParse.css,可以在app.wxss */ @import \"/wxParse/wxParse.wxss\"; xxxx.wxml \u003c!-- 引入模板 --\u003e \u003cimport src=\"你的路径/wxParse/wxParse.wxml\" /\u003e \u003c!-- 这里data中article为bindName --\u003e \u003ctemplate is=\"wxParse\" data=\"{{wxParseData:article.nodes}}\" /\u003e 注：更多详细用法请参考github ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:3:1","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"wxParse 的坑 空格渲染不一定出的来 识别不到wangEditor2的居中属性 ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:3:2","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"解决空格问题 修改wxDiscode.js文件中加入 str = str.replace(/\u0026nbsp;/g, \"\\xa0\"); // 这行解决了空格不显示的问题 ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:3:3","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"处理不被识别的属性 修改html2json.js中的 if (name == \"style\") { console.dir(value); // value = value.join(\"\") node.styleStr = value; } 为 // 这个属性可以根据自己富文本内容进行修改。来配合自己的富文本编辑器达到最好的效果 if (name == \"align\") { if (!node.styleStr) node.styleStr = \"\"; node.styleStr = node.styleStr + \"text-align: \" + value + \";\"; } if (name == \"style\") { console.dir(value); // value = value.join(\"\") node.styleStr += value; } ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:3:4","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["前端"],"content":"最后 下回写改wangEditor2的一些小 BUG。 ","date":"2019-05-27","objectID":"/posts/wxchat-mini-html-wxparse-richtext/:4:0","tags":["微信小程序","富文本"],"title":"微信小程序原生富文本渲染和wxParse","uri":"/posts/wxchat-mini-html-wxparse-richtext/"},{"categories":["工具"],"content":"Auto Rename Tag 自动重命名标签插件，html 标签使成对存在的，通常修改表签名的时候希望改一个会自动修改两个标签，以提交开发效率， 并且减少错误的发生。 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:1:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"Breacket Pair Colorizer 用于修改(),[],{}的颜色，方便快速定位代码块 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:2:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"Vetur Vue 语法高亮，格式化，自动补全等功能 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:3:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"Setting Sync 多台电脑开发的用户选用 配置文件同步功能，利用 gist 进行多设备统一同步 vscode 配置文件 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:4:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"EditorConfig for VS Code 用于同步整个项目的开发编辑统一。例如缩进定义等。 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:5:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"Git History 图形化查看 Git 的提交，详细文件修改等 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:6:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"GitLens 增强 VsCode git 功能，并且可以在文件中的代码块显示修改记录，便于定位代码作者并联系。 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:7:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"Guides 为代码块提高分割线， 可以快速定位代码块 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:8:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"Path Authcomplete 路径补全增强 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:9:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"Prettier 代码格式化工具，需要配置实现自动保存格式化代码。 并且可以配置eslint等工具进行规则配置。 ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:10:0","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["工具"],"content":"我的常用配置文件 { /* 字体设置 */ \"editor.fontFamily\": \"'Operator Mono','Fira Code', Menlo, Monaco, 'Courier New', monospace\", /* 取消类型检查js文件中 flow相关 */ \"javascript.validate.enable\": false, /* 字体大小设置 */ \"editor.fontSize\": 12, /* 字体行号设置 */ \"editor.lineHeight\": 25, /* 连体字支持，主要用于Fira Code中的大于等于小于等特殊符号 */ \"editor.fontLigatures\": true, /* 超出宽度自动换行 */ \"editor.wordWrap\": \"on\", /* 当文件移动更新import的路径 */ \"javascript.updateImportsOnFileMove.enabled\": \"always\", /* 确认删除提示 */ \"explorer.confirmDelete\": false, \"gitlens.advanced.messages\": { \"suppressLineUncommittedWarning\": true }, \"breadcrumbs.enabled\": true, /* 主题和文件图标主题 */ \"workbench.colorTheme\": \"Dracula\", \"workbench.iconTheme\": \"vscode-icons\", \"files.associations\": { \"*.cjson\": \"jsonc\", \"*.wxss\": \"css\", \"*.wxs\": \"javascript\" }, /* emmet的wxml语法支持 */ \"emmet.includeLanguages\": { \"wxml\": \"html\" }, \"minapp-vscode.disableAutoConfig\": true, /* 快速小地图关闭 节省空间 */ \"editor.minimap.enabled\": false, /* 启用eslint整合 */ \"prettier.eslintIntegration\": true, /* 自动格式化在保存后 */ \"eslint.autoFixOnSave\": true, /* 添加vue支持 */ \"eslint.validate\": [ \"javascript\", \"javascriptreact\", { \"language\": \"vue\", \"autoFix\": true }, { \"language\": \"html\", \"autoFix\": true } ], /* 强制单引号 */ \"prettier.singleQuote\": true, /* 尽可能控制尾随逗号的打印 */ \"prettier.trailingComma\": \"all\", /* 使用插件格式化 html */ \"vetur.format.defaultFormatter.html\": \"js-beautify-html\", /* 格式化插件的配置 */ \"vetur.format.defaultFormatterOptions\": { \"js-beautify-html\": { /* 属性强制折行对齐 */ \"wrap_attributes\": \"force-aligned\" } }, \"editor.renderIndentGuides\": false, \"editor.renderWhitespace\": \"all\", /* 格式化工具的tab长度定义 */ \"prettier.tabWidth\": 4, /* vue的tab定义长度 */ \"vetur.format.options.tabSize\": 4, /* 编辑器配置 在保存的时候自动格式化代码 */ \"editor.formatOnSave\": true, /* 编辑器的缩进量，支持所有语言 */ \"editor.tabSize\": 4, \"python.pythonPath\": \"/usr/local/opt/python/bin/python3.7\", /* 初始化路径 */ \"workbench.startupEditor\": \"welcomePage\" } ","date":"2018-12-25","objectID":"/posts/vscode-plugin-for-front-end-developer/:10:1","tags":["vscode","前端开发"],"title":"VScode 前端开发常用插件以及配置","uri":"/posts/vscode-plugin-for-front-end-developer/"},{"categories":["前端"],"content":"onReachBottom事件触发有延迟，快速下拉的话有几率不会触发事件 网上的资料说的是有延迟。大概是 350ms ","date":"2018-11-09","objectID":"/posts/about-wechat-miniprogram-onreachbottom-event-bug/:0:0","tags":["BUG","微信小程序"],"title":"关于微信小程序onReachBottom上拉触底事件","uri":"/posts/about-wechat-miniprogram-onreachbottom-event-bug/"},{"categories":["前端"],"content":"解决方法 可以利用scroll-view bindscrolltolower进行事件触发 ","date":"2018-11-09","objectID":"/posts/about-wechat-miniprogram-onreachbottom-event-bug/:1:0","tags":["BUG","微信小程序"],"title":"关于微信小程序onReachBottom上拉触底事件","uri":"/posts/about-wechat-miniprogram-onreachbottom-event-bug/"},{"categories":["系统"],"content":"ssh -Tv git@gitlab.com 得到以下提示 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0644 for '/Users/boiao/.ssh/gitlab' are too open. ","date":"2018-11-07","objectID":"/posts/fix-unprotected-private-key-file-with-dropbox-sync/:0:0","tags":["文件权限","linux"],"title":"修复DropBox同步到导致的SSH密钥文件权限丢失","uri":"/posts/fix-unprotected-private-key-file-with-dropbox-sync/"},{"categories":["系统"],"content":"解决方法 chmod 600 ~/.ssh/gitlab ","date":"2018-11-07","objectID":"/posts/fix-unprotected-private-key-file-with-dropbox-sync/:1:0","tags":["文件权限","linux"],"title":"修复DropBox同步到导致的SSH密钥文件权限丢失","uri":"/posts/fix-unprotected-private-key-file-with-dropbox-sync/"},{"categories":["Flutter"],"content":"系统需求 操作系统： MacOS(64 位) 磁盘空间： 700MB(不包括 IDE 工具的磁盘占用) 必备工具： 需要以下命令行工具的支持 bash,mkdir,rm,git,curl,unzip,which ","date":"2018-07-12","objectID":"/posts/install-flutter-on-macos/:1:0","tags":["开发环境","安装教程"],"title":"在MacOS上安装Flutter环境","uri":"/posts/install-flutter-on-macos/"},{"categories":["Flutter"],"content":"获取 FLutter SDK 跟随以下链接下载到最新的 Beta 版本的 Flutter SDK(寻找其他发布版本，或者一些旧的版本编译，请查看SDK 归档页面。)： flutter_macos_v0.5.1-beta.zip 解压这个文件在你想要的目录，例如： $ cd ~/Study $ unzip ~/Desktop/flutter_macos_v0.5.1-beta.zip 添加flutter到你环境变量 path： $ export PATH=`pwd`/flutter/bin:$PATH 注：该方法只对当前终端进程有效，需要永久生效建议修改 PATH 文件 执行以上命令以后，就可以在命令行直接输入flutter命令了，运行flutter doctor来完成安装。得到系统需要更新，这里再次输入flutter upgrade。 执行完后会自动执行flutter doctor，会检测当前系统缺少的依赖环境。如下所示： [✓] Flutter (Channel beta, v0.5.1, on Mac OS X 10.13.5 17F77, locale en-CN) [!] Android toolchain - develop for Android devices (Android SDK 27.0.3) ! Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses [!] iOS toolchain - develop for iOS devices (Xcode 9.4.1) ✗ Missing Xcode dependency: Python module \"six\". Install via 'pip install six' or 'sudo easy_install six'. ✗ libimobiledevice and ideviceinstaller are not installed. To install, run: brew install --HEAD libimobiledevice brew install ideviceinstaller ✗ ios-deploy not installed. To install: brew install ios-deploy ✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS platform side's plugin code that responds to your plugin usage on the Dart side. Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS. For more info, see https://flutter.io/platform-plugins To install: brew install cocoapods pod setup [✓] Android Studio (version 3.1) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality. [!] IntelliJ IDEA Ultimate Edition (version 2017.3.5) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality. [!] VS Code (version 1.23.1) [!] Connected devices ! No devices available ! Doctor found issues in 5 categories. 明显✓代表是满足依赖，✗代表不满足依赖，!是警告。 每行后面都包含了解决问题的方式和方法。 根据提示方法解决依赖不足的问题。如下是解决后flutter doctor所提供的报告： Doctor summary (to see all details, run flutter doctor -v): [✓] Flutter (Channel beta, v0.5.1, on Mac OS X 10.13.5 17F77, locale en-CN) [✓] Android toolchain - develop for Android devices (Android SDK 27.0.3) [✓] iOS toolchain - develop for iOS devices (Xcode 9.4.1) [✓] Android Studio (version 3.1) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality. [!] IntelliJ IDEA Ultimate Edition (version 2017.3.5) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality. [!] VS Code (version 1.23.1) [!] Connected devices ! No devices available ! Doctor found issues in 3 categories. 到此环境安装已结束。可以在Android Studio新建工程并开始体验热更新。 ","date":"2018-07-12","objectID":"/posts/install-flutter-on-macos/:2:0","tags":["开发环境","安装教程"],"title":"在MacOS上安装Flutter环境","uri":"/posts/install-flutter-on-macos/"},{"categories":["网管"],"content":" 需求情况如下，公司公网 IP 只有一个，为了充分利用这个 IP 实现多个内部服务器可以进行外部访问。 首先作为反向代理的服务器需要如下准备： 操作系统安装(*Linux) Haproxy 软件安装 双网卡，一个获取为公网 IP 地址，另一个为内网地址 Haproxy 软件安装很简单，因为我用的 Ubuntu，安装命令如下： sudo apt install haproxy 安装完成后直接编辑/etc/haproxy/haproxy.cfg，在其最后回车后添加如下参数： listen example #example是为这条记录取的别名，任意起名，方便记录 bind 0.0.0.0:2223 #监听所有来源的2223端口请求 mode tcp #tcp模式 server example-server 192.168.100.100:22 #example-server 是自己本地所指向的服务器进行取名，同样是方便记录，后面的IP和端口是你想要转发的目标IP和端口。 保存退出后直接，service haproxy restart 即可生效。 现在就可以通过公网 IP（例如：203.33.13.24:2223）进行 ssh 访问，使用内网的用户名和密码，可正常登录。 ","date":"2018-06-13","objectID":"/posts/using-haproxy-forward-ssh-to-other-port/:0:0","tags":["代理","端口转发"],"title":"使用Haproxy转发内网其他主机的ssh端口到公网的指定端口","uri":"/posts/using-haproxy-forward-ssh-to-other-port/"},{"categories":["工具"],"content":"相信很多童鞋都遇到过，在 Github 创建仓库的时候，勾选上了创建 License。 然后为了把本地的仓库上传。因为两个仓库内容不一致，首先要进行 pull，把远端的内容拉取下来，然后和并提交。 但是却发现refusing to merge unrelated histories这个错误，无法进行 pull。 所以就需要用到以下的参数： git pull origin master --allow-unrelated-histories 剩下的操作得以继续进行。 ","date":"2018-05-14","objectID":"/posts/fixed-refusing-to-merge-unrelated-histories-for-git/:0:0","tags":["git","github"],"title":"git无法pull仓库refusing to merge unrelated histories","uri":"/posts/fixed-refusing-to-merge-unrelated-histories-for-git/"}]